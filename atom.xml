<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://izumi-sora.github.io</id>
    <title>Gridea</title>
    <updated>2022-03-27T06:27:52.707Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://izumi-sora.github.io"/>
    <link rel="self" href="https://izumi-sora.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://izumi-sora.github.io/images/avatar.png</logo>
    <icon>https://izumi-sora.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[gridea 在linux上安装缺少依赖libappindicator3-1解决方法 ]]></title>
        <id>https://izumi-sora.github.io/post/asdasdsad/</id>
        <link href="https://izumi-sora.github.io/post/asdasdsad/">
        </link>
        <updated>2022-03-26T12:33:18.000Z</updated>
        <content type="html"><![CDATA[<p>环境：debian 11， KDE桌面<br>
原因：缺少必需依赖，bullseye中没有此依赖<br>
解决方法：<br>
1.浏览器搜索此依赖名称，寻找该依赖所在版本结果为<br>
https://packages.debian.org/buster/amd64/libappindicator3-1/download<br>
2.发现依赖所在版本buster，将deb http://ftp.de.debian.org/debian buster main 加入/etc/apt/sources.list<br>
<img src="https://izumi-sora.github.io/post-images/1648361835611.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="1"><img src="https://izumi-sora.github.io/post-images/1648361841991.png" alt="" loading="lazy"></figure>
<p>3.更个新，安装</p>
<pre><code>   sudo apt update 
   sudo apt upgrade -y
   sudo apt install &quot;gridea安装包所在位置&quot;
</code></pre>
<p><s>用ubuntu20.04，解决所有烦恼</s></p>
<p>Ubuntu 20.04.4 LTS</p>
<p>下载适用于台式机和笔记本电脑的最新 LTS 版本。  LTS 代表长期支持——这意味着在 2025 年 4 月之前的五年内，有保证的免费安全和维护更新。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux桌面要注意备份的个人资料]]></title>
        <id>https://izumi-sora.github.io/post/linux-zhuo-mian-yao-zhu-yi-bei-fen-de-ge-ren-zi-liao/</id>
        <link href="https://izumi-sora.github.io/post/linux-zhuo-mian-yao-zhu-yi-bei-fen-de-ge-ren-zi-liao/">
        </link>
        <updated>2022-03-12T19:39:43.000Z</updated>
        <content type="html"><![CDATA[<p>1.帐号密码  不会有人在换系统的时候不去想想自己有没有忘记自己的密码吧，哭<br>
2.个性化配置文件，比如.inputrc .bash_history 输入法的个人数据，<br>
3家目录，软件再装，家没了不好重建，最好的解决办法就是在删除之前备份整个家目录</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[又用回ubuntu了，]]></title>
        <id>https://izumi-sora.github.io/post/you-yong-hui-ubuntu-liao/</id>
        <link href="https://izumi-sora.github.io/post/you-yong-hui-ubuntu-liao/">
        </link>
        <updated>2022-03-12T19:36:13.000Z</updated>
        <content type="html"><![CDATA[<p>之前用debian很多东西安装起来很麻烦，没办法，还是ubuntu好用一点，毕竟用的人比较多，生态更好一点，之前从小网站下载的deb包，debian运行报错，ubuntu就可以正常运行，搞不懂，</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Debian 安装deb安装包注意事项]]></title>
        <id>https://izumi-sora.github.io/post/debian-an-zhuang-deb-an-zhuang-bao-zhu-yi-shi-xiang/</id>
        <link href="https://izumi-sora.github.io/post/debian-an-zhuang-deb-an-zhuang-bao-zhu-yi-shi-xiang/">
        </link>
        <updated>2022-03-04T12:20:55.000Z</updated>
        <summary type="html"><![CDATA[<p>1.不要dpkg安装<br>
1.尽量apt安装，<br>
1.如果缺少依赖也能正常运行，要明白此软件随时可能爆炸（虽然我没爆过）</p>
<p>讲解deb软件包的文章<br>
https://juejin.cn/post/7029284097939734535<br>
内容</p>
<p>Linux制作deb格式安装包教程</p>
<p>我们通常在使用Debian系的Linux系统时，常常会遇到一些deb格式安装包。我们也知道，使用dpkg命令即可安装。</p>
<p>当然，也会下载到一些软件是压缩包，就没那么方便了。我们能不能把它自己打包成deb安装包呢？当然是可以的。</p>
<p>其实，制作一个deb安装包是个很简单的事情。<br>
1，认识deb安装包结构</p>
<p>在制作安装包之前，我们认识一下deb包的内容：</p>
]]></summary>
        <content type="html"><![CDATA[<p>1.不要dpkg安装<br>
1.尽量apt安装，<br>
1.如果缺少依赖也能正常运行，要明白此软件随时可能爆炸（虽然我没爆过）</p>
<p>讲解deb软件包的文章<br>
https://juejin.cn/post/7029284097939734535<br>
内容</p>
<p>Linux制作deb格式安装包教程</p>
<p>我们通常在使用Debian系的Linux系统时，常常会遇到一些deb格式安装包。我们也知道，使用dpkg命令即可安装。</p>
<p>当然，也会下载到一些软件是压缩包，就没那么方便了。我们能不能把它自己打包成deb安装包呢？当然是可以的。</p>
<p>其实，制作一个deb安装包是个很简单的事情。<br>
1，认识deb安装包结构</p>
<p>在制作安装包之前，我们认识一下deb包的内容：</p>
<!-- more -->
<p><code>image</code>.png</p>
<p>这是我要打包的内容，可见除了DEBIAN文件夹，其余都是应用程序文件，这里其余部分的目录模拟了安装目录（看起来和安装完成后根目录里面对应内容结构一致），这是因为deb安装包安装就是把内容释放到了根目录/下。</p>
<p>DEBIAN文件夹中必须有control文件，表示安装包基本信息。</p>
<p>除此之外，其中还可以有：</p>
<pre><code>preinst 软件安装之前会执行的脚本
postinst 软件安装完成后执行的脚本
prerm 软件卸载前会执行的脚本
postrm 软件卸载后会执行的脚本
</code></pre>
<p>这四个脚本非必须，如果有，这四个脚本文件必须要有可执行权限。<br>
2，开始制作安装包</p>
<p>今天下载了typora，但是是压缩文件格式的，我们就以制作typora的安装包为例开始。<br>
(1) 创建一个目录存放所有文件</p>
<p>我创建了一个名为pack的文件夹，位于/home/maiqu/Downloads/pack，放置安装包内容和配置。下文也以此为例。<br>
(2) 创建DEBIAN文件夹并编写control文件</p>
<p>我们在pack文件夹中创建DEBIAN文件夹，并在里面新建control文件，并编辑control文件。</p>
<p>我这里control内容如下：</p>
<p>Package: typora<br>
Version: 13.6.1<br>
Section: utils<br>
Priority: optional<br>
Architecture: amd64<br>
Installed-Size: 218600<br>
Maintainer: swsk33<a href="mailto:example@163.com">example@163.com</a><br>
Provides: typora<br>
Description: 自己打包的Typora安装包。<br>
复制代码</p>
<p>上述字段意义如下：</p>
<pre><code>Package 包名
Version 版本号
Section 软件的类别，可以是utils、net、mail、text、devel等等
Priority 软件对于系统的重要程度，如required、standard、 optional、extra等等
Architecture 架构，32位软件填写i386，64位软件填写amd64，如果是既能在32位系统运行又能在64为系统运行可以填写all
Installed-Size 安装后大小，单位为kb
Maintainer 维护者，为维护者名&lt;邮箱&gt;的形式
Provides 供应者
Description 描述
</code></pre>
<p>上面的字段是必须字段或者常用字段，除此之外，control文件还可以有以下字段，以下字段非必须，按需加入：</p>
<pre><code>Essential 申明是否是系统最基本的软件包，值为yes或者no，如果是的话，这就表明该软件是维持系统稳定和正常运行的软件包，不允许任何形式的卸载
Depends 软件所依赖的其他软件包和库。如果是依赖多个软件包，彼此之间采用英文逗号隔开（例如该值为libc6, default-jre，说明该软件包依赖于libc6和default-jre这两个软件包，缺一不可）
Pre-Depends 软件安装前必须安装、配置依赖性的软件包和库
Recommends 这个字段表明推荐的安装的其他软件包
Suggests 建议安装的其他软件包
</code></pre>
<p>注意，control文件最末尾必须保留一个空行，否则打包会报错。<br>
(3) 将待打包内容放进来</p>
<p>上面我们知道了，其余内容即为被打包的软件内容，会被直接释放到根目录。那么我们这里也需要保持目录结构。</p>
<p>例如我想让typora安装到/opt文件夹中，那么我们这里就在pack文件夹中创建opt文件夹，将typora文件夹放进这个opt文件夹：</p>
<p>image.png</p>
<p>我们知道了除了DEBIAN文件夹，其它内容都会被直接放到根目录，那么这时我们就要在这里模拟出安装目录，把应用程序文件进行一个组织，以让它安装到我们想要的位置。<br>
(4) 快捷方式</p>
<p>之前写了个博客讲解Linux创建快捷方式的方法，这里就不再赘述Linux快捷方式文件怎么写了，直接参考这个博客即可：链接</p>
<p>当然，我们知道快捷方式文件都位于/usr/share/applications目录下，因此这里我们需要在我们的pack文件夹中建立起/usr/share/applications，在里面新建一个desktop文件表示快捷方式。</p>
<p>不过需要注意的是，快捷方式的可执行文件、图标、运行目录指向必须对应为这个安装包安装完成后我们的应用程序所在位置，如下图：</p>
<p>image.png<br>
3，打包</p>
<p>刚刚完成了安装包配置文件编写，现在就可以打包了。使用dpkg命令打包：</p>
<p>dpkg -b &quot;待打包目录&quot; &quot;生成deb安装包目录&quot;<br>
复制代码</p>
<p>我的待打包内容都在/home/maiqu/Downloads/pack文件夹下，那么我执行命令：</p>
<p>cd /home/maiqu/Downloads<br>
dpkg -b &quot;pack&quot; &quot;Typora-linux.deb&quot;<br>
复制代码</p>
<p>等待安装包构建完成，然后我们就可以使用dpkg -i命令安装它了！</p>
<p>image.png</p>
<p>如果要卸载，还是使用apt remove命令即可，包名就是上面control文件中Package字段的值。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[debian 11 sources.list]]></title>
        <id>https://izumi-sora.github.io/post/debian-11-sourceslist/</id>
        <link href="https://izumi-sora.github.io/post/debian-11-sourceslist/">
        </link>
        <updated>2022-03-03T00:02:11.000Z</updated>
        <summary type="html"><![CDATA[<p>deb http://deb.debian.org/debian bullseye main contrib non-free<br>
deb http://deb.debian.org/debian bullseye-updates main contrib non-free<br>
deb http://deb.debian.org/debian bullseye-backports main contrib non-free<br>
deb http://security.debian.org/debian-security/ bullseye-security main contrib non-free</p>
]]></summary>
        <content type="html"><![CDATA[<p>deb http://deb.debian.org/debian bullseye main contrib non-free<br>
deb http://deb.debian.org/debian bullseye-updates main contrib non-free<br>
deb http://deb.debian.org/debian bullseye-backports main contrib non-free<br>
deb http://security.debian.org/debian-security/ bullseye-security main contrib non-free</p>
<!-- more -->
<p>无用，只需要一个就够了其他的浪费<br>
deb http://deb.debian.org/debian bullseye main contrib non-free</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[debian 升级后gnome的任务栏怎么调回左边]]></title>
        <id>https://izumi-sora.github.io/post/debian-sheng-ji-hou-gnome-de-ren-wu-lan-zen-me-diao-hui-zuo-bian/</id>
        <link href="https://izumi-sora.github.io/post/debian-sheng-ji-hou-gnome-de-ren-wu-lan-zen-me-diao-hui-zuo-bian/">
        </link>
        <updated>2022-03-02T23:43:02.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>没有解决问题的一般方法，我目前只知道通过插件来解决这个问题，安装方法</p>
<pre><code>sudo apt install gnome-shell-extension-vertical-overview
</code></pre>
<p>然后</p>
<pre><code>gnome-shell-extension-prefs
</code></pre>
<p>找到vertical-overview打开它，完事<br>
<img src="https://izumi-sora.github.io/post-images/1646266257529.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux 怎么安装Gridea]]></title>
        <id>https://izumi-sora.github.io/post/linux-zen-me-an-zhuang-gridea/</id>
        <link href="https://izumi-sora.github.io/post/linux-zen-me-an-zhuang-gridea/">
        </link>
        <updated>2022-03-02T12:41:48.000Z</updated>
        <summary type="html"><![CDATA[<p>真的不知道之前gridea是怎么安装的，今天要重新安装gridea，结果发现apt，aptitde和右键通过图形界面都不能安装，幸好解压包之后发现data文件内的文件和linux根目录下的opt和usr文件一样，还说什么呢？直接复制粘贴，完事<br>
之前用dpkg安装虽然能安装上，但是如果执行 sudo apt --fix-broken install ，安装的文件就会被删除，但可以保留配置信息，所以如果担心复制粘贴导致缺少某些文件，可以先dpkg安装在卸载，然后手动安装</p>
]]></summary>
        <content type="html"><![CDATA[<p>真的不知道之前gridea是怎么安装的，今天要重新安装gridea，结果发现apt，aptitde和右键通过图形界面都不能安装，幸好解压包之后发现data文件内的文件和linux根目录下的opt和usr文件一样，还说什么呢？直接复制粘贴，完事<br>
之前用dpkg安装虽然能安装上，但是如果执行 sudo apt --fix-broken install ，安装的文件就会被删除，但可以保留配置信息，所以如果担心复制粘贴导致缺少某些文件，可以先dpkg安装在卸载，然后手动安装</p>
<!-- more -->
<!-- more -->
<pre><code>ubuntu20.04直接安装</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://izumi-sora.github.io/post/hello-gridea/</id>
        <link href="https://izumi-sora.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>